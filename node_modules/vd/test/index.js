
import dom from '../lib';
import assert from 'assert';
import { Text } from '../lib';
import { Element } from '../lib';
import { Style } from '../lib';

describe('x-dom', () => {

  it('should work for simple nodes', () => {
    let el = dom('p');
    assert(el instanceof Element);
    assert('p' == el.name);
  });

  it('should work for nodes with text', () => {
    let el = dom('p', 'With something');
    assert('p' == el.name);
    assert(1 == el.children.length);
  });

  it('should work with a single class', () => {
    let el = dom('p.woot');
    assert('p' == el.name);
    assert(1 == size(el.props));
    assert('woot' == el.props.class);
  });

  it('should work with classes', () => {
    let el = dom('p.a.b.c');
    assert('p' == el.name);
    assert(1 == size(el.props));
    assert('a b c' == el.props.class);
  });

  it('should work with classes obj', () => {
    let el = dom('p.a.b.c', {
      classes: {
        'd': true,
        e: false,
        f: 1,
        g: null
      }
    });
    assert('p' == el.name);
    assert(1 == size(el.props));
    assert('a b c d f' == el.props.class);
  });

  it('should ignore non-obj classes', () => {
    let el = dom('p.a', {
      classes: 'woot'
    });
    assert('p' == el.name);
    assert(2 == size(el.props));
    assert('a' == el.props.class);
    assert('woot' == el.props.classes);
  });

  it('should special case the `text` attr', () => {
    let el = dom('p', { text: 'woot' });
    assert('p' == el.name);
    assert(0 === size(el.props));
    assert(1 === el.children.length);
    assert(el.children[0] instanceof Text);
    assert('woot' == el.children[0].value());
  });

  it('should special case the `class` attr', () => {
    let el = dom('p.a.b.c', { class: 'd' });
    assert('p' == el.name);
    assert('a b c d' == el.props.class);

    let el2 = dom('p', { class: 'test' });
    assert('p' == el2.name);
    assert('test' == el2.props.class);
  });

  it('should allow inline attribute definition', () => {
    let el = dom('div title=test');
    assert('div' == el.name);
    assert(1 == size(el.props));
    assert('test' == el.props.title);
  });

  it('should allow multiple inline attributes', () => {
    let el = dom('input accesskey=k checked');
    assert('input' == el.name);
    assert(2 == size(el.props));
    assert('k' == el.props.accesskey);
    assert('checked' in el.props);
  });

  it('should support single quote attributes', () => {
    let el = dom("input title='Hi world' accesskey=k type='text'");
    assert('input' == el.name);
    assert(3 == size(el.props));
    assert('Hi world' == el.props.title);
    assert('k' == el.props.accesskey);
    assert('text' == el.props.type);
  });

  it('should support double quote attributes', () => {
    let el = dom("input title=\"Hi world\" accesskey=\"k\" type='text'");
    assert('input' == el.name);
    assert(3 == size(el.props));
    assert('Hi world' == el.props.title);
    assert('k' == el.props.accesskey);
    assert('text' == el.props.type);
  });

  it('should support single-char attributes', () => {
    let el = dom('input maxlength=2');
    assert('input' == el.name);
    assert(1 == size(el.props));
    assert('2' == el.props.maxlength);
  });

  it('should allow html syntax', () => {
    let el = dom('<input>');
    assert('input' == el.name);
  });

  it('should allow html syntax with attributes', () => {
    let el = dom('<input disabled type="text">');
    assert('input' == el.name);
    assert(2 == size(el.props));
    assert('text' == el.props.type);
    assert('disabled' in el.props);
  });

  it('should allow properties and child', () => {
    let el = dom('p', { title: 'Woot' }, 'Test');
    assert(1 == size(el.props));
    assert('Woot' == el.props.title);
    assert(1 == el.children.length);
    assert('Test' == el.children[0].value());
  });

  it('should allow properties and children (many)', () => {
    let el = dom('p', { title: 'Woot' },
      'Test',
      dom('b', 'Bold'),
      'Testing'
    );
    assert(1 == size(el.props));
    assert('Woot' == el.props.title);
    assert(3 == el.children.length);
    assert('Test' == el.children[0].value());
    assert('b' == el.children[1].name);
    assert('Bold' == el.children[1].children[0].value());
    assert('Testing' == el.children[2].value());
  });

  it('should allow properties and children (array)', () => {
    let el = dom('p', { title: 'Woot' }, [
      ['Test'],
      [dom('b', 'Bold')],
      'Testing'
    ]);
    assert(3 == el.children.length);
    assert('Test' == el.children[0].value());
    assert('b' == el.children[1].name);
    assert('Bold' == el.children[1].children[0].value());
    assert('Testing' == el.children[2].value());
  });

  it('should allow properties and children (many+array)', () => {
    let el = dom('p', { title: 'Woot' },
      'Test',
      [dom('b', 'Bold')],
      'Testing'
    );
    assert(3 == el.children.length);
    assert('Test' == el.children[0].value());
    assert('b' == el.children[1].name);
    assert('Bold' == el.children[1].children[0].value());
    assert('Testing' == el.children[2].value());
  });

  it('should work as shown in README', () => {
    let el = dom('div.main',
      dom('p', 'This is a paragraph'),
      dom('<img src="test.png">'),
      dom('footer',
        'Expressive but without ',
        dom('b', 'bloat')
      )
    );
    assert('<div class="main"><p>This is a paragraph</p>'
      + '<img src="test.png"><footer>Expressive but '
      + 'without <b>bloat</b></footer></div>' == el.toHTML());
  });

  it('should work with arrays', () => {
    let el = dom('div.main', [
      dom('p', 'This is a paragraph'),
      dom('<img src="test.png">'),
      dom('footer',
        'Expressive but without ',
        dom('b', 'bloat')
      )
    ]);
    assert('<div class="main"><p>This is a paragraph</p>'
      + '<img src="test.png"><footer>Expressive but '
      + 'without <b>bloat</b></footer></div>' == el.toHTML());
  });

  it('should initialize style elements', () => {
    let el = dom.style();
    assert(el instanceof Style);
  });

  it('should ignore garbage', () => {
    let el = dom('div', null, false, true, 'woot');
    assert('<div>woot</div>' == el.toHTML());
  });

});

function size(obj){
  let c = 0;
  for (var i in obj) c++;
  return c;
}
