
import Node from './node';
import Text from './text';
import Style from './style';
import Element from './element';
import parse from './parse';

export default build;
export { Node };
export { Text };
export { Element };
export { Style };
export { style };

function build(sel, ...children){
  let { tag, attrs } = parse(sel);
  let el = new Element(tag);

  if (isProperties(children[0])) {
    let props = children.shift();
    for (let i in props) {
      let prop = props[i];
      switch (i) {
        case 'class':
          if (null != attrs.class) {
            attrs.class += ' ' + prop;
          } else {
            attrs.class = prop;
          }
          break;

        case 'classes':
          let classes = props.classes;
          if (classes && 'object' == typeof classes) {
            for (let c in classes) {
              if (!prop[c]) continue;
              if (null != attrs.class) {
                attrs.class += ' ' + c;
              } else {
                attrs.class = c;
              }
            }
          } else {
            attrs[i] = prop;
          }
          break;

        default:
          attrs[i] = prop;
      }
    }
  }

  if (attrs) el.set(attrs);
  if (children) el.add(children);

  return el;
}

// differentiates plain object from children
function isProperties(obj){
  return obj
    && 'object' == typeof obj
    && !Array.isArray(obj)
    && !(obj instanceof Node);
}

// style helper
function style(){
  return new Style;
}
