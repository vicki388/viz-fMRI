"use strict";

var _slice = Array.prototype.slice;
var _interopRequire = function (obj) {
  return obj && (obj["default"] || obj);
};

var Node = _interopRequire(require("./node"));

var Text = _interopRequire(require("./text"));

var Style = _interopRequire(require("./style"));

var Element = _interopRequire(require("./element"));

var parse = _interopRequire(require("./parse"));

exports = module.exports = build;
exports.Node = Node;
exports.Text = Text;
exports.Element = Element;
exports.Style = Style;
exports.style = style;


function build(sel) {
  var children = _slice.call(arguments, 1);

  var _ref = parse(sel);

  var tag = _ref.tag;
  var attrs = _ref.attrs;
  var el = new Element(tag);

  if (isProperties(children[0])) {
    var props = children.shift();
    for (var i in props) {
      var prop = props[i];
      switch (i) {
        case "class":
          if (null != attrs["class"]) {
            attrs["class"] += " " + prop;
          } else {
            attrs["class"] = prop;
          }
          break;

        case "classes":
          var classes = props.classes;
          if (classes && "object" == typeof classes) {
            for (var c in classes) {
              if (!prop[c]) continue;
              if (null != attrs["class"]) {
                attrs["class"] += " " + c;
              } else {
                attrs["class"] = c;
              }
            }
          } else {
            attrs[i] = prop;
          }
          break;

        default:
          attrs[i] = prop;
      }
    }
  }

  if (attrs) el.set(attrs);
  if (children) el.add(children);

  return el;
}

// differentiates plain object from children
function isProperties(obj) {
  return obj && "object" == typeof obj && !Array.isArray(obj) && !(obj instanceof Node);
}

// style helper
function style() {
  return new Style();
}

